// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_consul is a generated GoMock package.
package mock_consul

import (
	gomock "github.com/golang/mock/gomock"
	release "helm.sh/helm/v3/pkg/release"
	reflect "reflect"
)

// MockConsul is a mock of Consul interface
type MockConsul struct {
	ctrl     *gomock.Controller
	recorder *MockConsulMockRecorder
}

// MockConsulMockRecorder is the mock recorder for MockConsul
type MockConsulMockRecorder struct {
	mock *MockConsul
}

// NewMockConsul creates a new mock instance
func NewMockConsul(ctrl *gomock.Controller) *MockConsul {
	mock := &MockConsul{ctrl: ctrl}
	mock.recorder = &MockConsulMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsul) EXPECT() *MockConsulMockRecorder {
	return m.recorder
}

// AddRepo mocks base method
func (m *MockConsul) AddRepo() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRepo")
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRepo indicates an expected call of AddRepo
func (mr *MockConsulMockRecorder) AddRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRepo", reflect.TypeOf((*MockConsul)(nil).AddRepo))
}

// UpdateRepo mocks base method
func (m *MockConsul) UpdateRepo() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateRepo")
}

// UpdateRepo indicates an expected call of UpdateRepo
func (mr *MockConsulMockRecorder) UpdateRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepo", reflect.TypeOf((*MockConsul)(nil).UpdateRepo))
}

// TranformChart mocks base method
func (m *MockConsul) TranformChart() (*release.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranformChart")
	ret0, _ := ret[0].(*release.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranformChart indicates an expected call of TranformChart
func (mr *MockConsulMockRecorder) TranformChart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranformChart", reflect.TypeOf((*MockConsul)(nil).TranformChart))
}
